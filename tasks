Файл config/config.json

	1.	Создать файл конфигурации config.json с параметрами
	 подключения к базе данных в формате JSON.

Файл config/config.go

	1.	Объявить структуру Config для хранения конфигурации базы данных.
	2.	Объявить структуру DatabaseConfig внутри Config.
	3.	Создать функцию LoadConfig, которая:
	•	Открывает файл конфигурации config.json.
	•	Декодирует содержимое JSON файла в структуру Config.
	•	Возвращает структуру Config и ошибку (если есть).

Файл db/init.go

	1.	Объявить глобальную переменную DB для хранения соединения с базой данных.
	2.	Создать функцию InitDB, которая:
	•	Принимает параметры подключения из структуры DatabaseConfig.
	•	Формирует строку подключения к базе данных.
	•	Подключается к базе данных с использованием gorm.
	•	Выполняет миграцию модели User.

Файл models/user.go

	1.	Объявить структуру User для модели пользователя с полями Username и Password.

Файл handlers/registration.go

	1.	Создать функцию GetRegPage, которая:
	•	Обрабатывает GET-запрос и отправляет страницу регистрации registration.html.
	2.	Создать функцию RegistrationPost, которая:
	•	Принимает логгер как параметр.
	•	Возвращает http.HandlerFunc, который:
	•	Проверяет, что метод запроса POST.
	•	Декодирует JSON из тела запроса в структуру User.
	•	Сохраняет пользователя в базе данных.
	•	Логирует ошибки (если есть) и успешные операции.

Файл main.go

	1.	Открыть файл для логов и настроить логгер.
	2.	Загрузить конфигурацию из JSON файла.
	3.	Инициализировать базу данных с использованием загруженной конфигурации.
	4.	Настроить маршруты для регистрации.
	•	Обработчик GET-запросов /registration для отображения страницы регистрации.
	•	Обработчик POST-запросов /register для обработки регистрации.
	5.	Запустить веб-сервер и логировать ошибки (если есть).

Файл static/registration.html

	1.	Создать HTML-страницу регистрации с формой для ввода имени пользователя и пароля.
	2.	Настроить форму для отправки POST-запроса на /register.

Псевдокод более подробно

	1.	Структура проекта:
	•	Создать директории и файлы согласно структуре проекта.
	2.	Файл config/config.json:
	•	Написать JSON конфигурацию для базы данных.
	3.	Файл config/config.go:
	•	Объявить структуру Config с полем Database типа DatabaseConfig.
	•	Объявить структуру DatabaseConfig с полями для параметров подключения.
	•	Написать функцию LoadConfig:
	•	Открыть файл config.json.
	•	Декодировать содержимое файла в структуру Config.
	•	Вернуть структуру Config.
	4.	Файл db/init.go:
	•	Объявить глобальную переменную DB типа *gorm.DB.
	•	Написать функцию InitDB:
	•	Принять параметры подключения из DatabaseConfig.
	•	Сформировать строку подключения.
	•	Подключиться к базе данных.
	•	Выполнить миграцию модели User.
	5.	Файл models/user.go:
	•	Объявить структуру User с полями gorm.Model, Username и Password.
	6.	Файл handlers/registration.go:
	•	Написать функцию GetRegPage:
	•	Обработать GET-запрос и отправить страницу registration.html.
	•	Написать функцию RegistrationPost:
	•	Принять логгер как параметр.
	•	Вернуть http.HandlerFunc:
	•	Проверить метод запроса.
	•	Декодировать JSON из тела запроса.
	•	Сохранить пользователя в базе данных.
	•	Логировать результат операции.
	7.	Файл main.go:
	•	Открыть файл для логов.
	•	Настроить логгер.
	•	Загрузить конфигурацию из JSON.
	•	Инициализировать базу данных.
	•	Настроить маршруты.
	•	Запустить веб-сервер.
	8.	Файл static/registration.html:
	•	Написать HTML-страницу с формой для регистрации.
	•	Настроить форму для отправки POST-запроса на /register.